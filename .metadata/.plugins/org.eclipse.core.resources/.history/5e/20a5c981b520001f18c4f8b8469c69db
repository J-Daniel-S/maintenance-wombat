package the.best.maintenancewombat.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.redisson.api.RedissonReactiveClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.socket.WebSocketHandler;
import org.springframework.web.reactive.socket.WebSocketMessage;
import org.springframework.web.reactive.socket.WebSocketSession;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.annotation.PostConstruct;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import the.best.maintenancewombat.documents.MaintenanceRequest;
import the.best.maintenancewombat.documents.Task;
import the.best.maintenancewombat.documents.branches.Category;
import the.best.maintenancewombat.documents.branches.Location;
import the.best.maintenancewombat.documents.branches.Priority;
import the.best.maintenancewombat.services.utils.InvalidModifierException;

@Service
public class MaintenanceService implements WebSocketHandler {
	
	private final ObjectMapper mapper;
    private Map<String, Task> tasks = new ConcurrentHashMap<>();
	
	@Autowired
	private RedissonReactiveClient client;
	
	public MaintenanceService(@Autowired ObjectMapper mapper) {
		this.mapper = mapper;
	}
	
	@PostConstruct
	private void initTasksHash() {
		
		Task task1 = new Task("Clean gutters", Priority.LOW, Category.CLEANUP, Location.ABILENE);
		Task task2 = new Task("Replace light bulbs", Priority.HIGH, Category.ELECTRICAL, Location.SUGARLAND);
		Task task3 = new Task("Unclog sink", Priority.LOW, Category.PLUMBING, Location.MCALLEN);
		Task task4 = new Task("Install new network switch", Priority.HIGH, Category.IT, Location.FORT_WORTH);
		Task task5 = new Task("Paint office walls", Priority.MEDIUM, Category.STRUCTURAL, Location.LUBBOCK);
		Task task6 = new Task("Clean oil spill", Priority.HIGH, Category.CLEANUP, Location.SAN_ANTONIO);
		
		try {
			client.getMap("ABILENE")
				.fastPut(task1.getName(), task1)
				.then(Mono.fromRunnable(() -> {
					tasks.put(task1.getName(), task1);
				})).subscribe();
			client.getMap("SUGARLAND")
				.fastPut(task2.getName(), mapper.writeValueAsString(task2))
				.then(Mono.fromRunnable(() -> {
					tasks.put(task2.getName(), task2);
				}))
				.subscribe();
			client.getMap("MCALLEN")
				.put(task3.getName(), task3)
				.then(Mono.fromRunnable(() -> {
					tasks.put(task3.getName(), task3);
				}))
				.subscribe();
			client.getMap("FORT_WORTH")
				.fastPut(task4.getName(), task4)
				.then(Mono.fromRunnable(() -> {
					tasks.put(task4.getName(), task4);
				}))
				.subscribe();
			client.getMap("LUBBOCK")
				.fastPut(task5.getName(), task5)
				.then(Mono.fromRunnable(() -> {
					tasks.put(task5.getName(), task5);
				}))
				.subscribe();
			client.getMap("SAN_ANTONIO")
				.fastPut(task6.getName(), mapper.writeValueAsString(task6))
				.then(Mono.fromRunnable(() -> {
					tasks.put(task6.getName(), task6);
				}))
				.subscribe();
		
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public Mono<Void> handle(WebSocketSession session) {
		
		return session.receive()
			.map(WebSocketMessage::getPayloadAsText)
			.flatMap(msg -> {
				MaintenanceRequest change;
				try {
					change = mapper.readValue(msg, MaintenanceRequest.class);
					return handleTaskChange(change, session)
							.then(session.send(Flux.just(session.textMessage(msg))));
				} catch (JsonProcessingException e) {
					e.printStackTrace();
					return Mono.error(e);
				}
				})
	            .doOnError(System.out::println)
	            .doFinally(s -> System.out.println("Subscriber finally " + s))
	            .then();
		
	}
	
	private Mono<Void> handleTaskChange(MaintenanceRequest type, WebSocketSession session) throws JsonProcessingException {
		
		//probably better to do a null check here...  currently will get an empty task from the front end
		
	    String taskKey = type.getTask().getName();
	    String location = type.getTask().getLocation().toString();
	    
	    	switch (type.getType()) {
	    	case DELETE:
	    		return client.getMap(location)
	    				.remove(taskKey)
	    				.then(Mono.fromRunnable(() -> {
	    					tasks.remove(taskKey);
	    					sendUpdatedTaskList(session);
//	    					System.out.println(change.getTask() + " deleted");
	    				}));
	    	case ADDORUPDATE:
	    		return client.getMap(location)
	    				.put(taskKey, new ObjectMapper().writeValueAsString(type.getTask()))
	    				.then(Mono.fromRunnable(() -> {
	    					tasks.put(taskKey, type.getTask());
	    					sendUpdatedTaskList(session);
//	    					System.out.println(change.getTask() + " added || updated");
	    				}));
	    	case GETALL:
	    		return client.getMap("*").readAllMap()
	    				.then(Mono.fromRunnable(() -> {
	    					sendUpdatedTaskList(session);
//	    					System.out.println("Get all tasks in all locations");
	    				}));
	    		// may deal with this on front end
	    	case GETLOCATION:
	    		return client.getMap(location).readAllValues()
	    				.then(Mono.fromRunnable(() -> {
	    					sendUpdatedTaskList(session);
	    					System.out.println("Get all tasks in " + location);
	    				}));
	    		
	    	default:
	    		return Mono.error(new InvalidModifierException("Value change type not properly specified:  acceptable values: 'delete' or 'addorupdate'"));
	    	}
	}

	private void sendUpdatedTaskList(WebSocketSession session) {
	    List<Task> updatedTasks = new ArrayList<>(tasks.values());
	    try {
	    	session.send(Flux.just(session.textMessage(new ObjectMapper().writeValueAsString(updatedTasks))))
	    	.subscribe();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
			session.send(Mono.error(e));
		}
	}
	
	
}
